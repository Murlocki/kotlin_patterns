@startuml
'https://plantuml.com/class-diagram

class Student
{
    -surname:String
    -name:String
    -patronymic:String
    -id:Int
    -phoneNumber:String?
    -telegram:String?
    -email:String?
    -gitHub:String?
    -{static} classId:Int = 0
    --Constructors--
    +Student(surname:String,name:String, patronymic:String,
       phoneNumber:String?=null,telegram:String?=null,
       email:String?=null, gitHub:String?=null)
    +Student(studentArgs: HashMap<String,Any?>)
    +Student(data: String)
    --Getters--
    +surname():String
    +name():String
    +patronymic():String
    +id():Int
    +phoneNumber():String?
    +telegram():String?
    +email():String?
    +gitHub():String?
    --Setters--
    +surname = (String)
    +name = (String)
    +patronymic = (String)
    +phoneNumber = (String?)
    +telegram = (String?)
    +email = (String?)
    +gitHub = (String?)
    --Methods--
    -gitExist():Boolean
    -contactExist():Boolean
    -validate():Boolean
    -checkValueAndPropertyNotNull(value:String?,propertyValue:String?): Boolean
    +setContacts(contacts:HashMap<String,String?>)
    -{static}cutStudent(data:String)
    +parseString(data:String):HashMap<String,Any?>
    +propertiesReturn(): Map<String, Any?>
    +toString(): String
    +getInitials():String
    +getOneContact(): HashMap<String,String>?
    -getFormattedContactShort():String
    +getInfo():String
}

class StudentBase{
    +idValue:Int
    +gitHub: String?
    -{static} classId:Int = 0
    -{static} maxId:Int = 0
    --Getters--
    +idValue():Int
    +gitHub():String?
    -{static} classId():Int
    -{static} maxId():Int
    --Setters--
    -{static} classId=(Int)
    -{static} maxId=(Int)
    --Constructors--
    +StudentBase(idValue: Int = autoGenerateId(), gitHub: String?=null)
    +{abstract}propertiesReturn():Map<String,Any?>
    +{static}autoGenerateId():Int
    +{static}setMaxId(newId:Int?)
    +{static}formatPropertyOutput(propertyName:String,propertyValue: Any?)
    +{static}parseString(data:String):HashMap<String,Any?>
    +toString(): String
}


class StudentShort{
     +initials:String
     +contact:Map<String,String>?
     --Constructors--
     +StudentShort(studentLong:Student)
     +StudentShort(studentId:Int,stringInfo:String)
     --Getters--
     +initials():String
     +contact:Map<String,String>?
     --Methods--
     -{static}passGit(stringInfo:String):String?
     -{static}validatorContact(contact:Map<String,String>?):Boolean
     -{static}validatorInitials(initials:String)
     -{static}validateContact(value: String?):Map<String,String>? =
     -{static}validateSurnameInitials(value:String?):String
     -{static}propertiesReturn():Map<String,Any?>
      +toString(): String
}

class StudentValidator{
        +{static} isValidPhone(phone: String?): Boolean
        +{static} isValidSurname(surname: String): Boolean
        +{static} isValidName(name: String): Boolean
        +{static} isValidPatronymic(patronymic: String): Boolean
        +{static} isValidTelegram(telegram: String?): Boolean
        +{static} isValidEmail(email: String?): Boolean
        +{static} isValidGitHub(gitHub: String?): Boolean
        +{static} <T>validatorFunc(value:T, errorMessage:String, valudatorFunction: KFunction1<T, Boolean>)
        +{static} validatorGit(gitHub: String?)
        +{static} validatorEmail(email: String?)
        +{static} validatorPhoneNumber(phone: String?)
        +{static} validatorTelegram(telegram: String?)
        +{static} validatorSurname(surname: String)
        +{static} validatorName(name: String)
        +{static} validatorPatronymic(patronymic: String)
}

StudentValidator <.. Student
StudentValidator <.. StudentBase
StudentValidator <.. StudentShort
StudentBase<|-- Student
StudentBase<|--StudentShort
@enduml