@startuml
'https://plantuml.com/class-diagram

class Student
{
    -surname:String
    -name:String
    -patronymic:String
    -id:Int
    -phoneNumber:String?
    -telegram:String?
    -email:String?
    -gitHub:String?
    --Constructors--
    +Student(surname:String,name:String, patronymic:String,
       phoneNumber:String?=null,telegram:String?=null,
       email:String?=null, gitHub:String?=null)
    +Student(studentArgs: HashMap<String,Any?>)
    +Student(data: String)
    --Getters--
    +surname():String
    +name():String
    +patronymic():String
    +id():Int
    +phoneNumber():String?
    +telegram():String?
    +email():String?
    +gitHub():String?
    --Setters--
    +surname = (String)
    +name = (String)
    +patronymic = (String)
    +phoneNumber = (String?)
    +telegram = (String?)
    +email = (String?)
    +gitHub = (String?)
    --Methods--
    -gitExist():Boolean
    -contactExist():Boolean
    -validate():Boolean
    -checkValueAndPropertyNotNull(value:String?,propertyValue:String?): Boolean
    +setContacts(contacts:HashMap<String,String?>)
    -{static}cutStudent(data:String)
    +{static}returnPropertyNames(): Set<String>
    +propertiesReturn(): Map<String, Any?>
    +toString(): String
    +getInitials():String
    +getOneContact(): HashMap<String,String>?
    -getFormattedContactShort():String
    +getInfo():String
}

class StudentBase{
    +idValue:Int = autoGenerateId()
    +gitHub: String? = 0
    -{static} classId:Int = 0
    -{static} maxId:Int = 0
    --Getters--
    +idValue():Int
    +gitHub():String?
    -{static} classId():Int
    -{static} maxId():Int
    --Setters--
    -{static} classId=(Int)
    -{static} maxId=(Int)
    --Constructors--
    +StudentBase(idValue: Int = autoGenerateId(), gitHub: String?=null)
    --Methods--
    +{abstract}propertiesReturn():Map<String,Any?>
    +{static}autoGenerateId():Int
    +{static}setMaxId(newId:Int?)
    +{static}formatPropertyOutput(propertyName:String,propertyValue: Any?):String
    +{static}parseString(data:String):HashMap<String,Any?>
    +toString(): String
}


class StudentShort{
     +initials:String
     +contact:Map<String,String>?
     --Constructors--
     +StudentShort(studentLong:Student)
     +StudentShort(studentId:Int,stringInfo:String)
     --Getters--
     +initials():String
     +contact:Map<String,String>?
     --Methods--
     -{static}passGit(stringInfo:String):String?
     -{static}validatorContact(contact:Map<String,String>?):Boolean
     -{static}validatorInitials(initials:String)
     -{static}validateContact(value: String?):Map<String,String>? =
     -{static}validateSurnameInitials(value:String?):String
     +propertiesReturn():Map<String,Any?>
     +{static}returnPropertyNames():Set<String>
     +toString(): String
}

class StudentValidator{
        +{static} isValidPhone(phone: String?): Boolean
        +{static} isValidSurname(surname: String): Boolean
        +{static} isValidName(name: String): Boolean
        +{static} isValidPatronymic(patronymic: String): Boolean
        +{static} isValidTelegram(telegram: String?): Boolean
        +{static} isValidEmail(email: String?): Boolean
        +{static} isValidGitHub(gitHub: String?): Boolean
        +{static} <T>validatorFunc(value:T, errorMessage:String, valudatorFunction: KFunction1<T, Boolean>)
        +{static} validatorGit(gitHub: String?)
        +{static} validatorEmail(email: String?)
        +{static} validatorPhoneNumber(phone: String?)
        +{static} validatorTelegram(telegram: String?)
        +{static} validatorSurname(surname: String)
        +{static} validatorName(name: String)
        +{static} validatorPatronymic(patronymic: String)
}

class DataTable{
    -data:Array<Array<Any?>>
    --Constructors--
    +DataTable(val data: Array<Array<Any?>>)
    --Methods--
    +getElement(row: Int, col: Int):Any?
    +getColumnCount(): Int
    +getRowCount(): Int
    +toString(): String
}

class DataList<T>{
    +elements: Array<T>
    -selectedIndices = mutableSetOf<Int>()
    --Getters--
    elements():Array<T>
    --Constructors--
    DataList(elements:Array<T>)
    --Methods--
    +select(number: Int)
    +getSelectedIds():Array<Int>
    +getNames(): Array<String>
    +getPropertiesOfClass(value:T):List<Any?>
    +getData(): DataTable
}


StudentValidator <.. Student
StudentValidator <.. StudentBase
StudentValidator <.. StudentShort
StudentBase<|-- Student
StudentBase<|--StudentShort

StudentShort <.. DataList
DataTable <.. DataList




class StudentListWithStrategy {
    #studentList: MutableList<Student>
    +studentListStrategy: StudentListBaseStrategy
    --Methods--
    +readFromFile(filePath: String);
    +writeToFile(filePath: String, fileName: String);
    +getStudentById(id: Int):Student
    +getKNStudentShortList(k: Int, n: Int):DataList<StudentShort>
    +sortByInitials():MutableList<Student>
    -addNewStudent(student: Student, id: Int = studentList.maxOf { it.id } + 1) {
    +addNewStudent(student: Student)
    +replaceById(id: Int, newStudent: Student)
    +fun deleteById(id: Int)
    +getStudentShortCount():Int
    +toString():String
}
interface StudentListInterface {
    +createMap(el: Any): HashMap<String, Any?>
    +convertMap(hashM: Map<String, Any?>): Map<String, Any>
}

class StudentListBaseStrategy {
    +{abstract}readFromFile(filePath: String)
    +{abstract}writeToFile(filePath: String, fileName: String)
}

class StudentListJsonStrategy {
    +createMap(el:Any):HashMap<String,Any?>
    +readFromFile(filePath: String)
    +convertMap(hashM:Map<String,Any?>):Map<String,Any>
    +fun writeToFile(filePath: String, fileName: String)
}

class StudentListYamlStrategy {
    +createMap(el: Any): HashMap<String, Any?>
    +readFromFile(filePath: String)
    +convertMap(hashM: Map<String, Any?>): Map<String, Any>
    +writeToFile(filePath: String, fileName: String)
}

class StudentListTxtStrategy{
    +readFromFile(filePath: String)
    +writeToFile(filePath: String, fileName: String)
}

object DbCon {
    -conn: Connection?
    --Methods--
    +createConnection()
    +executeSqlSelect(query:String): ResultSet?
    +executeSql(query:String)
    --Getters--
    +getConnection():Connection?;
}

class StudentListDB {
     -conn:Connection?
    --Constructors--
    +StudentListDB()
    --Methods--
    +getStudentById(id: Int): Student?
    +getKNStudentShortList(n: Int, k: Int): DataList<StudentShort>
    +addNewStudent(student: Student)
    +replaceById(id:Int,student: Student)
    +deleteById(id: Int)
    +getStudentShortCount(): Int
}

class StudentListBase{
        --Constructors--
        +StudentListBase()
        --Methods--
        +{abstract}getStudentById(id: Int): Student?
        +{abstract}getKNStudentShortList(n: Int, k: Int): DataList<StudentShort>
        +{abstract}addNewStudent(student: Student)
        +{abstract}replaceById(id:Int,student: Student)
        +{abstract}deleteById(id: Int)
        +{abstract}getStudentShortCount(): Int
}

StudentListDB o-- DbCon

StudentListBase<|-- StudentListWithStrategy
StudentListBase<|-- StudentListDB


StudentListWithStrategy *-- StudentListBaseStrategy

StudentListBaseStrategy<|-- StudentListJsonStrategy
StudentListBaseStrategy<|-- StudentListYamlStrategy
StudentListBaseStrategy<|-- StudentListTxtStrategy

StudentListInterface<|..StudentListYamlStrategy
StudentListInterface<|..StudentListJsonStrategy

DataList <.. StudentListBase
Student <.. StudentListBase
DataTable <.. StudentListBase
StudentShort <.. StudentListBase

Student <.. StudentListBaseStrategy
@enduml